version: '3.8'

services:
  # 主应用服务
  agent-v3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-v3-app
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=docker
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - agent-v3-network
    restart: unless-stopped
    command: python main.py --server --workers 4

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: agent-v3-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agent-v3-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: agent-v3-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agent_v3
      - POSTGRES_USER=agent_v3_user
      - POSTGRES_PASSWORD=agent_v3_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - agent-v3-network
    restart: unless-stopped

  # MongoDB数据库服务（可选）
  mongodb:
    image: mongo:7
    container_name: agent-v3-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=agent_v3_user
      - MONGO_INITDB_ROOT_PASSWORD=agent_v3_password
      - MONGO_INITDB_DATABASE=agent_v3
    volumes:
      - mongodb_data:/data/db
    networks:
      - agent-v3-network
    restart: unless-stopped
    profiles:
      - mongodb

  # Elasticsearch服务（可选，用于全文搜索）
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: agent-v3-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - agent-v3-network
    restart: unless-stopped
    profiles:
      - elasticsearch

  # MinIO对象存储服务（可选，用于文件存储）
  minio:
    image: minio/minio:latest
    container_name: agent-v3-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=agent_v3_user
      - MINIO_ROOT_PASSWORD=agent_v3_password
    volumes:
      - minio_data:/data
    networks:
      - agent-v3-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    profiles:
      - minio

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: agent-v3-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - agent-v3
    networks:
      - agent-v3-network
    restart: unless-stopped
    profiles:
      - nginx

  # Prometheus监控（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-v3-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agent-v3-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana仪表盘（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: agent-v3-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - agent-v3-network
    restart: unless-stopped
    profiles:
      - monitoring

# 网络配置
networks:
  agent-v3-network:
    driver: bridge

# 数据卷配置
volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data: